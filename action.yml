name: 'assume-role-action'
description: 'Composite action combining steps for assume role'
inputs:
  file:
    description: "File to get yaml properties from"
    required: false
    default: "serverless.yml"
  role:
    description: "Role suffix to assume"
    required: true
  region:
    description: "Region"
    required: true
  duration_seconds:
    description: "Role Assumption Duration in seconds"
    required: false
    default: "3600"
  aws_access_key_id:
    description: "Access Key ID"
    required: true
  aws_secret_access_key:
    description: "Secret Access Key"
    required: true
  role_skip_session_tagging:
    description: "Whether to tag role session or not"
    required: false
    default: "true"
  account_id:
    description: "AWS Account #"
    required: true
  hyphen:
    description: "Whether or not to hyphenate the role name"
    required: false
    default: "true"
  service:
    description: "The service being deployed"
    required: false
    default: ""
outputs:
  service:
    description: "service"
    value: "${{ steps.serverless.outputs.service }}"
runs:
  using: "composite"
  steps:
    - name: Get Serverless properties
      id: serverless
      if: inputs.service == ''
      uses: CumulusDS/get-yaml-paths-action@v0.1.1
      with:
        file: ${{ inputs.file }}
        service: service
    - name: Hyphenate
      id: hyphenate
      run: |
        echo "::group::RoleSessionName"
        if [[ "${{ inputs.service }}" == "" ]]; then
          service=${{ steps.serverless.outputs.service }}
        else
          service=${{ inputs.service }}
        fi
        if [[ "${{ inputs.hyphen }}" == "true" ]]; then
          RoleSessionName=${service}-${{ inputs.role }}
        else
          RoleSessionName=${service}${{ inputs.role }}
        fi
        echo "ROLE_SESSION_NAME=$RoleSessionName" >> $GITHUB_ENV
        echo "::endgroup::"
        echo "RoleSessionName is ${RoleSessionName}"
      shell: bash
    - name: Assume ${{ inputs.role }} Role
      id: assume-role
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.region }}
        role-duration-seconds: ${{ inputs.duration_seconds }}
        role-session-name: ${{ env.ROLE_SESSION_NAME }}
        role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ env.ROLE_SESSION_NAME }}
        role-skip-session-tagging: ${{ inputs.role_skip_session_tagging }}
